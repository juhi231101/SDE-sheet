Reverse Linked List II


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(head == null || head.next == null || left == right){
            return head;
        }
        ListNode l = head;
        ListNode r = head;
        ListNode mark = null;
        for(int i=1;i<left;i++){
            mark = l;
            l = l.next;
        }
        for(int i=1;i<right;i++){
            r = r.next;
        }
        ListNode p = l;
        ListNode c = p.next;
        ListNode n = c.next;
        while(p != r){
            c.next = p;
            p = c;
            c = n;
            if(n!= null){
                n = n.next;
            }     
        }
        
        if(c == null && l == head ){
            head = r;
            l.next = null;
        }
        else if(l == head){
            l.next = c;
            head = r;
        }
        else if(c == null){
            l.next = null;
            mark.next = r;
        }
        else{
            mark.next = p;
            l.next = c;
        }
        return head;
    }
}
